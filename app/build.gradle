/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

task hello{
    println 'Hello Gradle'
}

task createSomething {
    println 'createSomething'
}

task loadTestData {
    dependsOn createSomething
    doLast {
        println 'loadTestData'
    }

}

//выбираем первую команду
loadTestData.doFirst {
    println 'started loading test data'
}


task conditionTask {
    //property condition задавать через Pcondition=<value>, пример
    // gradle conditionTask -Pcondition=false
    def condition = project.hasProperty('condition') ? project.property('condition') : 'true'

    onlyIf {
        return condition.toBoolean()
    }

    doLast {
        println 'Выполнение задачи conditionTask'
    }
}

//didWork - свойство задачи. didWork = true - задача отработала
//
task firstTask{
    doLast {
        println 'First task is executing'
        didWork = true //указываем, что задача выполнила поставленную цель
    }
}

task secondTask{
    doLast {
        if (project.hasProperty('skipSecondTask') && project.skipSecondTask.toBoolean()) {
            println "Second task is skipped... "
            didWork = false
        } else {
            println "Second task is executed"
            didWork = true
        }
    }
}

task thirdTask(dependsOn: secondTask){ //теперь при запуске thirdTask также запустится secondTask
    doLast {
        if (secondTask.didWork) {
            println "Task 3 is joined"
        } else {
            println "Task 3 is not joined"
        }
    }
}
